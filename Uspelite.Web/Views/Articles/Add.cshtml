@using Uspelite.Services.Common
@model Uspelite.Web.Models.Articles.ArticlesBindingModel

@Html.DisplayFor(x => ViewData.ModelState)

<div id="containerBox">
    <div id="data-helper" data-imagefolder="@Constants.ROOT_IMAGES_FOLDER"></div>
    <div id="addLinkHolder"></div>
    <div id="addVideoHolder"></div>

    @using (Html.BeginForm("Add", "Articles", FormMethod.Post, new { id="article-form", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        @Html.EditorForModel(Model)

        <input id="x1" type="hidden" name="X1" />
        @*<input id="x2" type="hidden" name="X2" />*@

        <input id="y1" type="hidden" name="Y1" />
        @*<input id="y2" type="hidden" name="Y2" />*@

        <input id="w" type="hidden" name="W" />
        <input id="h" type="hidden" name="H" />



        <div class="form-group">
            <div class="col-lg-10 col-lg-offset-2">
                <input type="reset" class="btn btn-danger" value="Reset form"/>
                @if (Model.Id == 0)
                {
                    <input id="add-article-button" type="submit" class="btn btn-success" value="Add article" />
                }
                else
                {
                    <input id="edit-article-button" type="button" class="btn btn-success" value="Edit article" />
                }

                <input id="save-draft-button" type="button" class="btn btn-success" value="Save Draft" />

                <input id="preview-button" type="button" class="btn btn-success" value="Preview" />

                @Html.LabelFor(x => x.ScheduledPublish)
                @Html.CheckBoxFor(x => x.ScheduledPublish)
            </div>
        </div>

        
    }
</div>

@section styles {
    @Styles.Render("~/bundles/kendoStyles")
    <link href="~/Scripts/Libraries/JCrop/css/jquery.Jcrop.min.css" rel="stylesheet" />
}

@section overridingStyles{
    <style>
        div#main {
            width: 100%;
        }

        .k-editor .k-HorizontalRule {
            background: 50% 50% no-repeat url(http://digitaltools.node3000.com/wp-content/themes/digital-tools/images/rss-icon-16x16px.png);
        }

        #addLinkHolder {
            display: none;
            left: 0;
            right: 0;
            margin-left: auto;
            margin-right: auto;
            position: absolute;
            z-index: 10000;
            background-color: white;
            width: 500px;
            vertical-align: middle;
        }
    </style>
}

@section scripts{
    @Scripts.Render("~/bundles/kendo")

    @*<script src="~/Scripts/Libraries/JCrop/js/jquery.color.js"></script>*@
    <script src="~/Scripts/Libraries/JCrop/js/jquery.Jcrop.js"></script>



    <script>
        $(function () {
            var editor = $("#Content").data("kendoEditor");
            var editorBody = $(editor.body);



            if (typeof (Storage) != 'undefined') {
                var content = localStorage.getItem('articleContent');
                if (content) {
                    editor.exec("inserthtml", { value: content });
                }
            }

            var hitCount = 0;

            editorBody.on('keypress', function () {
                hitCount += 1;
                if (hitCount % 10 == 0) {
                    localStorage.setItem('articleContent', editorBody.html());
                }
                if (hitCount % 50 == 0) {
                    saveAs('Draft');
                }
            });

            $('input[type="submit"]').on('click', function () {
                debugger;
                var optionText = 'Published';
                var statusDropdownOptions = $('#Status option');
                changeDropDownValueByText(statusDropdownOptions, optionText);
                localStorage.removeItem('articleContent');
            });

        });


        function saveAs(optionName) {

            debugger;
            var optionText = optionName;
            var statusDropdownOptions = $('#Status option');
            changeDropDownValueByText(statusDropdownOptions, optionText);

            var form = $("#article-form");
            var data = new FormData(form[0]);

            data.append('TitleImage', $('#image-upload-input')[0].files[0]);

            $.ajax({
                url: '/Articles/Add',
                data: data,
                processData: false,
                contentType: false,
                type: 'POST',
                success: function (data) {
                    if (data.Added) {
                        $("#Id").val(data.Id);
                        $("#Slug").val(data.Slug);
                    }
                },
                error: function (data) {
                    console.log('error in autosaving article');
                }
            });

            //$.post('/Articles/Add', data, function (result) {
            //    debugger;
            //    console.log('updated');
            //});
        }

        function changeDropDownValueByText(jqueryOptionsSelector, optionText) {
            jqueryOptionsSelector.prop('selected', false).filter(function () {
                return $(this).text() == optionText;
            }).prop('selected', true);
        }


        //START EVENTS
        $('#ScheduledPublish').on('change', function () {
            debugger;
            var timePickerWrapper = $('#article-publish-timepicker-wrapper');
            timePickerWrapper.toggleClass('display-none');
        });

        $('#save-draft-button').on('click', function () {
            saveAs('Draft');
            window.location.href = '/';
        });

        $('#edit-article-button').on('click', function () {
            saveAs('Published');
            var form = $("#article-form");
            form.submit();
        });

        $('#preview-button').on('click', function () {
            saveAs('Draft');
            var slug = $('#Slug').val();

            window.open(document.location.origin + '/' + slug, '_blank');
        });
        //END EVENTS

    </script>

    <script>
        //editor image's css properties
        $(function() {
            $($("#Content").data("kendoEditor").body).on('dblclick', 'img', function(ev) {
                var $that = $(this);
                $('#resize-box').remove();
                var width = $that.css('width');
                var height = $that.css('height');
                debugger;
                showResizeBox($that, ev);

                //$that.css('width', '100px');
                //$that.css('height', '100px');
            });
        });

        function showResizeBox(clickedImg, ev) {
            var width = clickedImg.css('width');
            var height = clickedImg.css('height');

            var resizingBox =
                '<div id="resize-box">' +
                    '<label for="width-inp">Width</label>' +
                    '<input id="width-inp" type="text" value="' + width + '"/>' +
                    '<br/>' +
                    '<input  id="resizeImg" type="button" class="btn btn-success" value="Resize" onclick="resizeImg(clickedImg)"' +
                    '</div>';

            $('#containerBox').append(resizingBox);
            var resizeBoxHolder = $('#resize-box');

            resizeBoxHolder.css('display', 'table-cell');
            resizeBoxHolder.css('position', 'absolute');
            resizeBoxHolder.css('top', $("#Content").position().top);
            resizeBoxHolder.css('z-index', 100);

            $('#resizeImg').click({ img: clickedImg }, resizeImg);
        }

        function resizeImg(ev) {
            debugger;
            var clickedImage = ev.data.img;
            var originalWidth = clickedImage.css('width');
            var originalHeight = clickedImage.css('height');

            var newWidth = $('#resize-box #width-inp').val();
            var newHeight = newWidth * (originalWidth / originalHeight);

            clickedImage.css('width', newWidth);
            clickedImage.css('height', newHeight);

            $('#resize-box').remove();
        }

    </script>
    <script>
        //custom link tool's scripts
        $(function() {
            $('#addLinkHolder').on('change', '#selectLink', function() {
                var selectedArticleSlug = this[this.selectedIndex].value;
                var selectedArticleTitle = this[this.selectedIndex].text;
                $('#Url').val('/' + selectedArticleSlug);
                //$('#copyText').val(selectedArticleTitle);
                $('#Title').val(selectedArticleTitle.toUpperCase());
            });

            $('body').on('click', '.uspelite-close-button', function() {
                var $that = $(this);
                debugger;
                $that.parent().remove();
            });
        });

        function addLinkToArticle(e) {
            $.get('/Articles/BuildLinkView', null, function(data) {
                var linkHolder = $('#addLinkHolder');
                linkHolder.html(data);
                linkHolder.css('display', 'table-cell');
                linkHolder.css('position', 'absolute');
                linkHolder.css('top', $("#Content").position().top);
            });
        }

        function addVideoToArticle(e) {
            $.get('/Articles/InsertVideo', null, function(data) {
                var videoHolder = $('#addVideoHolder');
                videoHolder.html(data);
                videoHolder.css('display', 'block');
                videoHolder.css('position', 'absolute');
                videoHolder.css('top', $("#Content").position().top);
                videoHolder.css('margin', '0 auto');
                videoHolder.css('z-index', 100);
            });
        }

        function addLink() {
            var editor = $("#Content").data("kendoEditor");

            var linkText = $('#Title').val();
            var location = $('#Url').val();
            var tooltip = $('#ToolTip').val();

            var blank = $('#OpenInNewWindow').is(":checked");
            var linkHtml = GenerateLink(linkText, location, tooltip, blank);
            editor.exec("inserthtml", { value: linkHtml });

            $('#addLinkHolder').empty();
        }


        function addVideo() {
            debugger;
            var editor = $("#Content").data("kendoEditor");
            var videoUrl = $('#insert-video-url-input').val();

            var videoHtml = GenerateVideoEmbedUrl(videoUrl);
            editor.exec("inserthtml", { value: videoHtml });

            $('#addVideoHolder').empty();
        }

        function GenerateVideoEmbedUrl(videoUrl) {
            debugger;
            $.get('/Videos/GetEmbedLink', { videoUrl: videoUrl }, function (embedLink) {
                var htmlEmbedLink = '<div class="video-container" id="video-container"><iframe width="560" height="315" src="' + embedLink + ' frameborder="0" allowfullscreen></iframe></div>';
                return htmlEmbedLink;
            });
        }

        function GenerateLink(linkText, location, title, blank) {
            var target = '';
            var linkTitle = '';

            if (blank) {
                target = 'target="_blank"';
            }
            if (title.length > 1) {
                linkTitle = 'title="' + title + '"';
            }

            if (location[0] !== '/') {
                if (!location.match("^http://")) {
                    location = 'http://' + location;
                }
            }

            var result = '<a href="' + location + '"' + target + linkTitle + '>' + linkText + '</a>';
            return result;
        }
    </script>



    <script>
        var $mainImageContainer = $('#main-upload-image');

//main image crop and visualize
        function readURL(input) {

            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function(e) {
                    debugger;
                    if (JCropObj.instantiated) {
                        JCropObj.destroy();
                        $('#cropBtn').hide();
                    }

                    //this image is for update only
                    if ($('#original-main-pic')) {
                        $('#original-main-pic').remove();
                    }
                    //
                    $mainImageContainer.attr('src', e.target.result);
                    $('#cropBtn').show();
                    debugger;
                    JCropObj.innitialize();
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        $("#image-upload-input").change(function() {
            readURL(this);
        });


//attach jcrop and get the coords

        JCropObj = {
            jcrop_api_obj: this,

            instantiated: false,

            innitialize: function innitialize() {
                JCropObj.instantiated = true;
                $mainImageContainer.Jcrop({
                    setSelect: [60, 70, 750, 500],
                    aspectRatio: 3 / 2,
                    boxWidth: 650,
                    onChange: showCoords,
                    onSelect: showCoords,
                    onRelease: clearCoords
                }, function() {
                    JCropObj.jcrop_api_obj = this;
                });

                $('#coords').on('change', 'input', function(e) {
                    var x1 = $('#x1').val(),
                        x2 = $('#x2').val(),
                        y1 = $('#y1').val(),
                        y2 = $('#y2').val();
                    JCropObj.jcrop_api_obj.setSelect([x1, y1, x2, y2]);
                });

            },
            destroy: function destroy() {
                JCropObj.jcrop_api_obj.destroy();
                JCropObj.instantiated = false;
            }
        }

        function showCoords(c) {
            var coordHelper = $('#coordinates-data-helper');
            $('#x1').val(c.x);
            coordHelper.attr('data-x1', c.x);
            $('#y1').val(c.y);
            coordHelper.attr('data-y1', c.y);
            $('#x2').val(c.x2);
            coordHelper.attr('data-x2', c.x2);
            $('#y2').val(c.y2);
            coordHelper.attr('data-y2', c.y2);
            $('#w').val(c.w);
            coordHelper.attr('data-w', c.w);
            $('#h').val(c.h);
            coordHelper.attr('data-h', c.h);
        };

        function clearCoords() {
            $('#coords input').val('');
        };

        //remove existing large image
        //draw cropped image on the canvas
        //save the coords as data attr on the canvas

        function cropBtn_click() {
            debugger;
            var $canvas = $('#coordinates-data-helper');
            var x1 = $canvas.attr('data-x1');
            var y1 = $canvas.attr('data-y1');
            var x2 = $canvas.attr('data-x2');
            var y2 = $canvas.attr('data-y2');
            var w = $canvas.attr('data-w');
            var h = $canvas.attr('data-h');

            var context = $canvas[0].getContext('2d');
            var imageObj = new Image();
            var imageSource = $mainImageContainer.attr('src');
            $canvas.attr('width', '600');
            $canvas.attr('height', '400');

            imageObj.onload = function() {
                debugger;
                context.drawImage(imageObj, x1, y1, w, h, 0, 0, 600, 400);
                $mainImageContainer.attr('src', '#');
                $mainImageContainer.css('display', 'none');
                $mainImageContainer.css('width', '0');
                $mainImageContainer.css('height', '0');

                JCropObj.destroy();
                $('#cropBtn').hide();
            };

            imageObj.src = imageSource;
        }
    </script>

    <script>
        //only bulgarian letters and spaces allowed
        var onlyCyrillicSymbolsAndSpaces = /[^А-я A-z0-9\"'$%#&№)(+=!?,.;:/-]/i;
        var $titleInput = $("#Title");

        $titleInput.keyup(function() {
            if (this.value.match(onlyCyrillicSymbolsAndSpaces)) {
                this.value = this.value.replace(onlyCyrillicSymbolsAndSpaces, "");
            }
        });
    </script>
}